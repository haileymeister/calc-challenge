{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","ref","firebase","database","updateValue","value","console","log","handleChange","event","setState","currentEquation","target","result","eval","state","addToFirebase","whole","push","equation","updateState","on","snapshot","val","equations","Object","keys","map","key","pastEquations","resetForm","document","querySelector","showValues","style","display","displayValues","previous","formatted","reverse","length","i","values","innerHTML","handleClick","preventDefault","this","forEach","data","dataVal","off","className","id","htmlFor","type","name","placeholder","onChange","aria-label","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0d5c4808.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pastEquations: [],\n      currentEquation: '',\n    };\n  }\n\n  ref = firebase.database().ref('/');\n\n  componentDidMount() {\n    this.ref.on('value', (snapshot) => {\n      let values = [];\n      snapshot.forEach(data => {\n        let dataVal = data.val();\n        values.push(dataVal);\n      })\n\n      this.setState({pastEquations: values})\n      this.showValues();\n    });  \n  }\n\n  componentWillUnmount() {\n    this.ref.off()\n  }\n\n  updateValue = (value) => {\n    value = value;\n    console.log(value)\n    return value;\n  }\n  \n  handleChange = (event) => { \n    this.setState({currentEquation: event.target.value});\n  }\n\n  result = () => {\n    let result = eval(this.state.currentEquation);\n    return result;\n  }\n\n  addToFirebase = () => {\n    let whole = this.state.currentEquation + \"=\" + this.result();\n    this.setState({currentEquation: whole})\n    this.ref.push({equation: whole});\n  }\n\n  updateState = () => {\n    this.ref.on('value', (snapshot) => {\n      let value = snapshot.val();\n      let keys = Object.keys(value);\n        let equations = keys.map((key) => {\n          return {key: key, ...value[key] }\n        });\n        this.setState({pastEquations: equations})\n    });\n  }\n\n  resetForm = () => {\n    document.querySelector('#equation').value = '';\n  }\n\n  showValues = () => {\n    document.querySelector('#previous').style.display = \"block\";\n    this.displayValues();\n  }\n\n  displayValues = () => {\n    let previous = document.querySelector('#previous');\n      let formatted = \"\";\n      let equations = this.state.pastEquations.reverse();\n      console.log(equations)\n      if (equations.length > 10) {\n        for (let i = 0; i < 10; i++){\n          formatted += \" \" + Object.values(equations)[i].equation\n          + '<br>';\n        }\n    } else {\n        for (let i = 0; i < equations.length; i++){\n          formatted += \" \" + Object.values(equations)[i].equation + '<br>';\n        }\n    }\n    previous.innerHTML = formatted;\n    \n  }\n\n  handleClick = (event) => {\n    event.preventDefault();\n    this.showValues();\n    this.result();\n    this.addToFirebase();\n    this.showValues();\n    this.resetForm();\n    this.setState({currentEquation: ''})\n  }\n\n  render () {\n    return(\n      <div className=\"container\">\n        <div className=\"calculator\">\n          <div className=\"flex-container\">\n            <section>\n              <div className=\"flex-item\">\n                <form id=\"input-form\">\n                  <label htmlFor=\"calc\" id=\"math-lab\">Enter a math problem:</label>\n                  <input type=\"text\" id=\"equation\" name=\"input-bar\" className=\"math-input\" placeholder=\"type here\" value={this.state.value} onChange={this.handleChange}></input>\n\n                  <input type=\"submit\" value=\"Evaluate\" className=\"submit-button\" aria-label=\"submit button\" onClick={this.handleClick}></input>\n\n                </form>\n              </div>\n            </section>\n            <section>\n              <div>\n                <p>Previous Problems</p>\n                <div>\n                  <div id=\"previous\" className=\"answer-list\">\n                  </div>\n\n                </div>\n              </div>\n            </section>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport firebase from 'firebase/app';\n\nlet firebaseConfig = {\n    apiKey: \"AIzaSyD_E2EZMnErGgYbnCRYEZoDyh8ItcSeEBM\",\n    authDomain: \"calc-challenge.firebaseapp.com\",\n    databaseURL: \"https://calc-challenge-default-rtdb.firebaseio.com\",\n    projectId: \"calc-challenge\",\n    storageBucket: \"calc-challenge.appspot.com\",\n    messagingSenderId: \"1024475497479\",\n    appId: \"1:1024475497479:web:e102eb7c82fadaa2bad6a2\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}